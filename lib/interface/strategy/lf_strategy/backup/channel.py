# -*- coding: utf-8 -*-

"""
__author__ = 'liwenxuan'
__modify__ = 20170810

作用: 针对channel模块的测试用例

"""

import time
import threading

from lib.interface.strategy.lf_strategy.backup.case_various_module import keep_lf_invalid, channel_path
from lib.interface.strategy.lf_strategy.lib.log_handler import logger



# ---------------------------------------------------------------------------------------------------------------------

# 测试用例格式: [case_id, play_count, p2p_ratio, lf_valid_count]; 预期结果请见对应的计算公式或测试方案
path_1 = [
    [1, 0, -1.0, 1], [2, 0, 0.0, 1], [3, 0, 0.4, 1], [4, 0, 0.85, 1], [5, 0, 1.0, 1]
]

path_2 = [
    [6, 1, -1.0, 1], [7, 5, -1.0, 1], [8, 10, -1.0, 1], [9, 60, -1.0, 1]
]

path_3 = [
    [10, 1, 0.0, 49], [11, 2, 0.0, 50], [12, 5, 0.0, 51], [13, 1, 0.4, 50], [14, 3, 0.4, 51], [15, 5, 0.4, 49],
    [16, 1, 0.1, 100], [17, 4, 0.2, 0], [18, 5, 0.3, 50]
]

path_6 = [
    [19, 6, 0.0, 51], [20, 9, 0.1, 55], [21, 10, 0.0, 61], [22, 6, 0.4, 51], [23, 9, 0.3, 55], [24, 10, 0.4, 61]
]

path_7 = [
    [25, 6, 0.0, 50], [26, 8, 0.1, 50], [27, 6, 0.4, 50], [28, 8, 0.3, 50]
]

path_8 = [
    [29, 6, 0.0, 37], [30, 8, 0.1, 49], [31, 6, 0.4, 37], [32, 8, 0.3, 49]
]

path_9 = [
    [33, 9, 0.0, 54], [34, 10, 0.0, 60], [35, 9, 0.4, 54], [36, 10, 0.4, 60], [37, 9, 0.1, 51], [38, 10, 0.3, 51]
]

path_10 = [
    [39, 9, 0.0, 50], [40, 10, 0.1, 50], [41, 9, 0.3, 50], [42, 10, 0.4, 50]
]

path_11 = [
    [43, 6, 0.0, 36], [44, 6, 0.4, 24], [45, 9, 0.2, 49], [46, 10, 0.0, 49], [47, 10, 0.4, 40]
]

path_12 = [
    [48, 6, 0.0, 23], [49, 9, 0.0, 35], [50, 10, 0.0, 39], [51, 6, 0.4, 23], [52, 9, 0.4, 35], [53, 10, 0.4, 39],
    [54, 8, 0.2, 0]
]

path_13 = [
    [55, 11, 0.0, 67], [56, 20, 0.2, 121], [57, 11, 0.4, 67]
]

path_16 = [
    [58, 11, 0.0, 66], [59, 12, 0.0, 51], [60, 11, 0.4, 66], [61, 12, 0.4, 51], [62, 20, 0.2, 80]
]

path_17 = [
    [63, 11, 0.0, 50], [64, 12, 0.1, 50], [65, 11, 0.3, 50], [66, 12, 0.4, 50]
]

path_18 = [
    [67, 11, 0.0, 49], [68, 11, 0.0, 44], [69, 12, 0.0, 49], [70, 11, 0.4, 49], [71, 11, 0.4, 44], [72, 12, 0.4, 49],
    [73, 12, 0.2, 48]
]

path_19 = [
    [74, 11, 0.0, 43], [75, 13, 0.0, 50], [76, 20, 0.1, 79], [77, 11, 0.4, 43], [78, 13, 0.4, 50], [79, 20, 0.3, 79]
]

path_20 = [
    [80, 1, 0.41, 5], [81, 5, 0.41, 5], [82, 10, 0.41, 5], [83, 55, 0.5, 5], [84, 1, 0.8, 8], [85, 2, 0.85, 9],
    [86, 5, 0.85, 9], [87, 10, 0.85, 9], [88, 55, 0.85, 9], [89, 3, 0.5, 25], [90, 19, 0.85, 170]
]

path_21 = [
    [91, 1, 0.41, 0], [92, 1, 0.41, 1], [93, 5, 0.41, 1], [94, 10, 0.41, 4], [95, 55, 0.5, 4],
    [96, 1, 0.8, 7], [97, 1, 0.85, 8], [98, 5, 0.85, 8], [99, 10, 0.85, 8], [100, 55, 0.85, 8]
]

path_22 = [
    [101, 1, 0.41, 9], [102, 5, 0.41, 41], [103, 10, 0.41, 81], [104, 55, 0.5, 500], [105, 1, 0.8, 9],
    [106, 1, 0.85, 9], [107, 5, 0.85, 45], [108, 10, 0.85, 90], [109, 55, 0.85, 500]
]

path_23 = [
    [110, 1, 0.41, 10], [111, 5, 0.41, 52], [112, 10, 0.41, 105], [113, 51, 0.5, 520], [114, 1, 0.8, 11],
    [115, 1, 0.85, 12], [116, 5, 0.85, 52], [117, 10, 0.85, 105], [118, 51, 0.85, 520]
]

path_24 = [
    [119, 1, 0.86, 49], [120, 5, 0.86, 50], [121, 10, 0.86, 50], [122, 51, 0.86, 49], [123, 1, 0.9, 0],
    [124, 1, 0.95, 1], [125, 1, 1.0, 50], [126, 5, 1.0, 49], [127, 10, 1.0, 49], [128, 51, 1.0, 50]
]

path_25 = [
    [129, 1, 0.86, 51], [130, 5, 0.86, 53], [131, 10, 0.86, 105], [132, 51, 0.9, 540], [133, 1, 1.0, 51],
    [134, 5, 1.0, 53], [135, 10, 1.0, 105], [136, 51, 1.0, 540]
]

path_26 = [
    [137, 5, 0.86, 51], [138, 10, 0.86, 51], [139, 51, 0.9, 51], [140, 10, 0.95, 100], [141, 5, 1.0, 51],
    [142, 10, 1.0, 51], [143, 51, 1.0, 51]
]

# ---------------------------------------------------------------------------------------------------------------------

# 可选参数一览, 详细说明请见对应的函数内的说明
# keep_lf_invalid(file_range, lf_invalid_count, end_time="2020-01-01 00:00:00", lf_invalid_interval=1*60,
#                 province_id="p_1", isp_id="i_1", file_unique_id=0, peer_unique_id="C"*7, **kwargs)
# channel_path(file_range, play_count, p2p_ratio, lf_valid_count, round_count=4, round_interval=1*60,
#              province_id="p_1", isp_id="i_1", play_start=0, lf_start=0,
#              file_unique_id=0, play_unique_id="CDDD", lf_unique_id="CDCC", **kwargs)


def multi_channel_path(file_range, strategy_interval, lf_invalid_count=1, *case_suites, **conditions):
    """
    多线程执行channel模块计算部分的用例
    :param file_range: file_id的范围
    :param ss_interval: lf调度策略的统计间隔
    :param lf_invalid_count: 无效lf数, peer_id的后缀从9999999开始向下递减
    :param case_suites: 测试用例集的组合
                        一个测试用例(case)的格式为[case_id, play_count, p2p_ratio, lf_valid_count]
                        一个测试用例集(case_suite)的格式为[case_1, case_2, ...]
    :param conditions: 对各个case_suite中的所有case添加条件, 可添加的条件请见上面的说明, 或参考对应函数内的说明
    :return:
    """
    ss_interval = int(strategy_interval)
    assert ss_interval > 0

    # 准备无效lf
    if int(lf_invalid_count) > 0:
        t = threading.Thread(target=keep_lf_invalid, args=(file_range, lf_invalid_count), kwargs=conditions)
        t.setDaemon(True)
        t.start()
        # 等待4个统计间隔, 使无效lf生效
        time.sleep(ss_interval*4)

    # 运行channel计算的测试用例
    for case_suite in case_suites:
        for case in case_suite:
            t = threading.Thread(target=channel_path, args=(case[0], case[1], case[2], case[3]), kwargs=conditions)
            t.start()
            time.sleep(1)
        time.sleep(ss_interval)

# ---------------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    logger.setLevel("WARN")

    # multi_channel_path([1, 150], 3*60, 1, path_1, path_2, path_3, path_6, path_7, path_8, path_9, path_10,
    #                    path_11, path_12, path_13, path_16, path_17, path_18, path_19, path_20, path_21,
    #                    path_22, path_23, path_24, path_25, path_26,
    #                    province_id="p_1", isp_id="i_1")







